/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./client/src/MultiSelect.js":
/*!***********************************!*\
  !*** ./client/src/MultiSelect.js ***!
  \***********************************/
/***/ (function(module) {

eval("/*\n * Created by David Adams\n * https://codeshack.io/multi-select-dropdown-html-javascript/\n *\n * Released under the MIT license\n */\nclass MultiSelect {\n  constructor(element, options = {}) {\n    const defaults = {\n      placeholder: 'Select item(s)',\n      max: null,\n      search: true,\n      selectAll: true,\n      listAll: true,\n      closeListOnItemSelect: false,\n      name: '',\n      width: '',\n      height: '',\n      dropdownWidth: '',\n      dropdownHeight: '',\n      data: [],\n      onChange() {},\n      onSelect() {},\n      onUnselect() {},\n    }\n\n    this.options = Object.assign(defaults, options)\n    this.selectElement = element\n\n    if (typeof element === 'string') {\n      this.selectElement = document.querySelector(element)\n    }\n\n    Object\n      .entries(this.selectElement.dataset)\n      .forEach(([prop]) => {\n        if (this.options[prop] !== undefined) {\n          this.options[prop] = this.selectElement.dataset[prop]\n        }\n      })\n\n    this.name = 'multi-select-' + Math.floor(Math.random() * 1000000)\n\n    if (this.selectElement.getAttribute('name')) {\n      this.name = this\n        .selectElement\n        .getAttribute('name')\n    }\n\n    if (!this.options.data.length) {\n      const curOptions = this\n        .selectElement\n        .querySelectorAll('option')\n\n      for (let i = 0; i < curOptions.length; i += 1) {\n        this.options.data.push({\n          value: curOptions[i].value,\n          text: curOptions[i].innerHTML,\n          selected: curOptions[i].selected,\n          html: curOptions[i].getAttribute('data-html'),\n        })\n      }\n    }\n\n    this.element = this.template()\n    this.selectElement.replaceWith(this.element)\n    this.updateSelected()\n    this.eventHandlers()\n  }\n\n  template() {\n    let optionsHTML = ''\n\n    for (let i = 0; i < this.data.length; i += 1) {\n      let selected = ''\n\n      if (this.selectedValues.includes(this.data[i].value)) {\n        selected = ' multi-select-selected'\n      }\n\n      optionsHTML += `\n        <div\n          class=\"multi-select-option${selected}\"\n          data-value=\"${this.data[i].value}\"\n        >\n          <span class=\"multi-select-option-radio\"></span>\n          <span class=\"multi-select-option-text\">\n            ${this.data[i].html ? this.data[i].html : this.data[i].text}\n          </span>\n        </div>\n      `\n    }\n\n    let selectAllHTML = ''\n\n    if (this.options.selectAll === true || this.options.selectAll === 'true') {\n      selectAllHTML = `<div class=\"multi-select-all\">\n                <span class=\"multi-select-option-radio\"></span>\n                <span class=\"multi-select-option-text\">Select all</span>\n            </div>`\n    }\n\n    const width = this.width ? 'width:' + this.width + ';' : ''\n    const height = this.height ? 'height:' + this.height + ';' : ''\n\n    let elID = ''\n    let dropWidth = ''\n    let dropHeight = ''\n    let searchInput = ''\n\n    if (this.selectElement.id) {\n      elID = ' id=\"' + this.selectElement.id + '\"'\n    }\n\n    if (this.options.dropdownWidth) {\n      dropWidth = 'width:' + this.options.dropdownWidth + ';'\n    }\n\n    if (this.options.dropdownHeight) {\n      dropHeight = 'height:' + this.options.dropdownHeight + ';'\n    }\n\n    if (this.options.search === true || this.options.search === 'true') {\n      searchInput = `<input\n        type=\"text\"\n        class=\"multi-select-search\"\n        placeholder=\"Search...\">`\n    }\n\n    const selectedValues = this\n      .selectedValues\n      .map((value) => {\n        const { name } = this\n        return '<input type=\"hidden\" name=\"' + name + '\" value=\"' + value + '\">'\n      }).join('')\n\n    let maxOptions = ''\n\n    if (this.options.max) {\n      maxOptions = this.selectedValues.length + '/' + this.options.max\n    }\n\n    const template = `\n      <div class=\"multi-select ${this.name}\" style=\"${width}${height}\"${elID}>\n        ${selectedValues}\n        <div class=\"multi-select-header\" style=\"${width}${height}\">\n          <span class=\"multi-select-header-max\">\n            ${maxOptions}\n          </span>\n          <span class=\"multi-select-header-placeholder\">\n            ${this.placeholder}\n          </span>\n        </div>\n        <div class=\"multi-select-options\" style=\"${dropWidth}${dropHeight}\">\n          ${searchInput}\n          ${selectAllHTML}\n          ${optionsHTML}\n        </div>\n      </div>\n    `\n    const element = document.createElement('div')\n    element.innerHTML = template\n\n    return element\n  }\n\n  eventHandlers() {\n    const headerElement = this\n      .element\n      .querySelector('.multi-select-header')\n\n    this\n      .element\n      .querySelectorAll('.multi-select-option')\n      .forEach((option) => {\n        option.onclick = () => {\n          let selected = true\n\n          if (!option.classList.contains('multi-select-selected')) {\n            if (this.options.max\n              && this.selectedValues.length >= this.options.max\n            ) {\n              return\n            }\n\n            option\n              .classList\n              .add('multi-select-selected')\n\n            if (this.options.listAll === true\n              || this.options.listAll === 'true'\n            ) {\n              if (this.element.querySelector('.multi-select-header-option')) {\n                const opt = Array\n                  .from(\n                    this\n                      .element\n                      .querySelectorAll('.multi-select-header-option'),\n                  ).pop()\n\n                const newHTML = option\n                  .querySelector('.multi-select-option-text')\n                  .innerHTML\n\n                opt.insertAdjacentHTML(\n                  'afterend',\n                  `<span\n                    class=\"multi-select-header-option\"\n                    data-value=\"${option.dataset.value}\"\n                    >${newHTML}\n                  </span>`,\n                )\n              } else {\n                const newHTML = option\n                  .querySelector('.multi-select-option-text')\n                  .innerHTML\n\n                headerElement.insertAdjacentHTML(\n                  'afterbegin',\n                  `<span\n                    class=\"multi-select-header-option\"\n                    data-value=\"${option.dataset.value}\">\n                    ${newHTML}\n                  </span>`,\n                )\n              }\n            }\n            this\n              .element\n              .querySelector('.multi-select')\n              .insertAdjacentHTML(\n                'afterbegin',\n                `<input\n                type=\"hidden\"\n                name=\"${this.name}[]\"\n                value=\"${option.dataset.value}\">`,\n              )\n\n            this\n              .data\n              .filter((data) => data.value === option.dataset.value)[0]\n              .selected = true\n          } else {\n            option\n              .classList\n              .remove('multi-select-selected')\n\n            this\n              .element\n              .querySelectorAll('.multi-select-header-option')\n              .forEach((headerOption) => {\n                if (headerOption.dataset.value === option.dataset.value) {\n                  headerOption.remove()\n                }\n              })\n\n            this\n              .element\n              .querySelector(`input[value=\"${option.dataset.value}\"]`)\n              .remove()\n\n            this\n              .data\n              .filter((data) => data.value === option.dataset.value)[0]\n              .selected = false\n\n            selected = false\n          }\n\n          if (this.options.listAll === false\n          || this.options.listAll === 'false'\n          ) {\n            if (this.element.querySelector('.multi-select-header-option')) {\n              this\n                .element\n                .querySelector('.multi-select-header-option')\n                .remove()\n            }\n\n            headerElement.insertAdjacentHTML(\n              'afterbegin',\n              `<span class=\"multi-select-header-option\">\n              ${this.selectedValues.length} selected\n            </span>`,\n            )\n          }\n\n          if (!this.element.querySelector('.multi-select-header-option')) {\n            headerElement.insertAdjacentHTML(\n              'afterbegin',\n              `<span class=\"multi-select-header-placeholder\">\n              ${this.placeholder}\n            </span>`,\n            )\n          } else if (\n            this\n              .element\n              .querySelector('.multi-select-header-placeholder')\n          ) {\n            this\n              .element\n              .querySelector('.multi-select-header-placeholder')\n              .remove()\n          }\n\n          if (this.options.max) {\n            const selectedLen = this.selectedValues.length\n            const selectedMax = this.options.max\n\n            this\n              .element\n              .querySelector('.multi-select-header-max')\n              .innerHTML = selectedLen + '/' + selectedMax\n          }\n\n          if (this.options.search === true || this.options.search === 'true') {\n            this\n              .element\n              .querySelector('.multi-select-search').value = ''\n          }\n\n          this\n            .element\n            .querySelectorAll('.multi-select-option')\n            .forEach((element) => { element.style.display = 'flex' })\n\n          if (this.options.closeListOnItemSelect === true\n            || this.options.closeListOnItemSelect === 'true'\n          ) {\n            headerElement\n              .classList\n              .remove('multi-select-header-active')\n          }\n\n          this\n            .options\n            .onChange(\n              option.dataset.value,\n              option.querySelector('.multi-select-option-text').innerHTML,\n              option,\n            )\n\n          if (selected) {\n            this\n              .options\n              .onSelect(\n                option.dataset.value,\n                option.querySelector('.multi-select-option-text').innerHTML,\n                option,\n              )\n          } else {\n            this\n              .options\n              .onUnselect(\n                option.dataset.value,\n                option.querySelector('.multi-select-option-text').innerHTML,\n                option,\n              )\n          }\n        }\n      })\n\n    headerElement.onclick = () => {\n      headerElement\n        .classList\n        .toggle('multi-select-header-active')\n    }\n\n    if (this.options.search === true || this.options.search === 'true') {\n      const search = this\n        .element\n        .querySelector('.multi-select-search')\n\n      search.oninput = () => {\n        this\n          .element\n          .querySelectorAll('.multi-select-option')\n          .forEach((option) => {\n            const currValue = option\n              .querySelector('.multi-select-option-text')\n              .innerHTML\n              .toLowerCase()\n              .indexOf(search.value.toLowerCase())\n\n            option\n              .style\n              .display = currValue > -1 ? 'flex' : 'none'\n          })\n      }\n    }\n    if (this.options.selectAll === true || this.options.selectAll === 'true') {\n      const selectAllButton = this\n        .element\n        .querySelector('.multi-select-all')\n\n      selectAllButton.onclick = () => {\n        const allSelected = selectAllButton\n          .classList\n          .contains('multi-select-selected')\n\n        this\n          .element\n          .querySelectorAll('.multi-select-option')\n          .forEach((option) => {\n            const dataItem = this\n              .data\n              .find((data) => data.value === option.dataset.value)\n\n            if (dataItem\n              && (\n                (allSelected && dataItem.selected)\n                || (!allSelected && !dataItem.selected)\n              )\n            ) {\n              option.click()\n            }\n          })\n        selectAllButton.classList.toggle('multi-select-selected')\n      }\n    }\n\n    if (this.selectElement.id\n      && document.querySelector('label[for=\"' + this.selectElement.id + '\"]')\n    ) {\n      document\n        .querySelector('label[for=\"' + this.selectElement.id + '\"]')\n        .onclick = () => {\n          headerElement\n            .classList\n            .toggle('multi-select-header-active')\n        }\n    }\n    document.addEventListener('click', (event) => {\n      if (!event.target.closest('.' + this.name)\n        && !event.target.closest('label[for=\"' + this.selectElement.id + '\"]')\n      ) {\n        headerElement\n          .classList\n          .remove('multi-select-header-active')\n      }\n    })\n  }\n\n  updateSelected() {\n    if (this.options.listAll === true || this.options.listAll === 'true') {\n      this\n        .element\n        .querySelectorAll('.multi-select-option')\n        .forEach((option) => {\n          if (option.classList.contains('multi-select-selected')) {\n            const html = option\n              .querySelector('.multi-select-option-text')\n              .innerHTML\n\n            this\n              .element\n              .querySelector('.multi-select-header')\n              .insertAdjacentHTML(\n                'afterbegin',\n                `<span\n                      class=\"multi-select-header-option\"\n                      data-value=\"${option.dataset.value}\"\n                    >${html}</span>`,\n              )\n          }\n        })\n    } else if (this.selectedValues.length > 0) {\n      this\n        .element\n        .querySelector('.multi-select-header')\n        .insertAdjacentHTML(\n          'afterbegin',\n          `<span class=\"multi-select-header-option\">\n                ${this.selectedValues.length} selected\n                </span>`,\n        )\n    }\n\n    if (this.element.querySelector('.multi-select-header-option')) {\n      this\n        .element\n        .querySelector('.multi-select-header-placeholder')\n        .remove()\n    }\n  }\n\n  get selectedValues() {\n    return this.data.filter((data) => data.selected).map((data) => data.value)\n  }\n\n  get selectedItems() {\n    return this.data.filter((data) => data.selected)\n  }\n\n  set data(value) {\n    this.options.data = value\n  }\n\n  get data() {\n    return this.options.data\n  }\n\n  set selectElement(value) {\n    this.options.selectElement = value\n  }\n\n  get selectElement() {\n    return this.options.selectElement\n  }\n\n  set element(value) {\n    this.options.element = value\n  }\n\n  get element() {\n    return this.options.element\n  }\n\n  set placeholder(value) {\n    this.options.placeholder = value\n  }\n\n  get placeholder() {\n    return this.options.placeholder\n  }\n\n  set name(value) {\n    this.options.name = value\n  }\n\n  get name() {\n    return this.options.name\n  }\n\n  set width(value) {\n    this.options.width = value\n  }\n\n  get width() {\n    return this.options.width\n  }\n\n  set height(value) {\n    this.options.height = value\n  }\n\n  get height() {\n    return this.options.height\n  }\n}\n\nmodule.exports = MultiSelect\n\n\n//# sourceURL=webpack://silverstripe-frontend-multiselectfield/./client/src/MultiSelect.js?");

/***/ }),

/***/ "./client/src/script.js":
/*!******************************!*\
  !*** ./client/src/script.js ***!
  \******************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval("const MultiSelect = __webpack_require__(/*! ./MultiSelect */ \"./client/src/MultiSelect.js\")\n\ndocument\n  .querySelectorAll('[data-multi-select]')\n  .forEach((element) => new MultiSelect(element))\n\n\n//# sourceURL=webpack://silverstripe-frontend-multiselectfield/./client/src/script.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	__webpack_require__("./client/src/MultiSelect.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./client/src/script.js");
/******/ 	
/******/ })()
;